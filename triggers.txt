----- creacion tabla que guarda registro de las acciones
CREATE TABLE IF NOT EXISTS "log_action"(
                                           "id" SERIAL NOT NULL,
                                           "id_action" INT,
                                           "estado" VARCHAR(50),
    "date_action" TIMESTAMP WITH TIME ZONE,
                                PRIMARY KEY ("id")
    --TABLESPACE pg_default
    );

ALTER TABLE public.log_action
    OWNER to postgres;

----- FUNCION PARA HACER EL TRIGGER INSERT EMERGENCIA

CREATE FUNCTION insert_emergency_log_action()
    RETURNS TRIGGER AS
    $$
BEGIN
INSERT INTO "log_action"(id_action, estado, date_action)
VALUES (NEW.id_emergency, NEW.status, CURRENT_TIMESTAMP);

RETURN NEW;
END;
$$
LANGUAGE 'plpgsql';

----- FUNCION PARA HACER EL TRIGGER UPDATE EMERGENCIA

CREATE FUNCTION update_emergency_log_action()
    RETURNS TRIGGER AS
    $$
BEGIN
INSERT INTO "log_action"(id_action, estado, date_action)
VALUES (NEW.id_emergency, NEW.status, CURRENT_TIMESTAMP);

RETURN NEW;
END;
$$
LANGUAGE 'plpgsql';


---- TRIGGER INSERT EMERGENCIA

CREATE TRIGGER trg_insert_emergency_log_action
    AFTER INSERT ON "Emergency"
    FOR EACH ROW
    EXECUTE PROCEDURE insert_emergency_log_action();

---- TRIGGER UPDATE EMERGENCIA

CREATE TRIGGER trg_update_emergency_log_action
    AFTER UPDATE ON "Emergency"
    FOR EACH ROW
    EXECUTE PROCEDURE insert_emergency_log_action();


----- FUNCION PARA HACER EL TRIGGER INSERT TAREAS
----- puede que arroje problemas con el new.id_state_task porque es int y se setea con un charvar
CREATE FUNCTION insert_task_log_action()
    RETURNS TRIGGER AS
    $$
BEGIN
INSERT INTO "log_action"(id_action, estado, date_action)
VALUES (NEW.id_task, NEW.id_state_task, CURRENT_TIMESTAMP);

RETURN NEW;
END;
$$
LANGUAGE 'plpgsql';

----- FUNCION PARA HACER EL TRIGGER UPDATE TAREAS
----- puede que arroje problemas con el new.id_state_task porque es int y se setea con un charvar
CREATE FUNCTION update_task_log_action()
    RETURNS TRIGGER AS
    $$
BEGIN
INSERT INTO "log_action"(id_action, estado, date_action)
VALUES (NEW.id_task, NEW.id_state_task, CURRENT_TIMESTAMP);

RETURN NEW;
END;
$$
LANGUAGE 'plpgsql';

---- TRIGGER TAREAS

CREATE TRIGGER trg_insert_task_log_action
    AFTER INSERT ON "Task"
    FOR EACH ROW
    EXECUTE PROCEDURE insert_task_log_action();

---- TRIGGER TAREAS

CREATE TRIGGER trg_update_task_log_action
    AFTER INSERT ON "Task"
    FOR EACH ROW
    EXECUTE PROCEDURE update_task_log_action();